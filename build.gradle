plugins {
	id "edu.wpi.first.GradleRIO" version "2020.3.2"
	id "google-test-test-suite"
	id "cpp"
}

deploy {
  targets {
    target('coprocessor') {
      directory = '/home/vision'
      maxChannels = 1
      timeout = 4
      failOnMissing = true

      locations {
        ssh {
          address = 'CJvision.local'
          // address = '192.168.178.246'
          user = 'vision'
          password = 'CJfrc'
          ipv6 = false
        }
      }
    }
  }

	artifacts {

    fileTreeArtifact('VisionProgram') {
      targets << 'coprocessor'
      files = rootProject.fileTree(dir: 'src/')

      predeploy << {
        execute('sudo systemctl stop vision || true')
      }

      postdeploy << {
        execute('make')
        execute('chmod +x cjVision')
        execute('sudo systemctl restart vision ||true')
      }
    }

		fileTreeArtifact('VisionResources') {
			targets << 'coprocessor'

			files = rootProject.fileTree(dir: 'src/resources')
			postdeploy << {
        execute('sudo ln -sf $(pwd)/system/vision.service /etc/systemd/system')
        execute('sudo systemctl daemon-reload; sudo systemctl enable vision')

        if (project.hasProperty('stop')) {
          execute('sudo systemctl daemon-reload; sudo service vision stop; sudo service vision status')
        } else {
          execute('sudo systemctl daemon-reload; sudo service vision restart; sudo service vision status')
        }
			}

      postdeploy << {
        execute('sudo cp -n /etc/ssh/sshd_config /etc/ssh/sshd_config.old')
        execute('sudo cp $(pwd)/system/sshd_config /etc/ssh/sshd_config')
      }
		}
	}
}

task buildVision(type:Exec) {
  description "Builds vision locally"
  workingDir "src/"

  println "Building Vision Project..."
  commandLine 'make'
}

task runVision(type:Exec) {
  dependsOn buildVision

  description "Run Vision Locally with webcam to test"
  workingDir "src/build"

  commandLine './cjVision'
}

wrapper {
	gradleVersion = '6.0'
}